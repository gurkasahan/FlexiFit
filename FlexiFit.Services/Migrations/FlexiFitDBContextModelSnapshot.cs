// <auto-generated />
using System;
using FlexiFit.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlexiFit.Services.Migrations
{
    [DbContext(typeof(FlexiFitDBContext))]
    partial class FlexiFitDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FlexiFit.Entities.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("BookingTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId");

                    b.HasIndex("ClassId");

                    b.HasIndex("MemberId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FlexiFit.Entities.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            ClassName = "Yoga"
                        },
                        new
                        {
                            ClassId = 2,
                            ClassName = "Pilates"
                        },
                        new
                        {
                            ClassId = 3,
                            ClassName = "Zumba"
                        },
                        new
                        {
                            ClassId = 4,
                            ClassName = "Strength-Training"
                        });
                });

            modelBuilder.Entity("FlexiFit.Entities.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("MembershipTier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("FlexiFit.Entities.Models.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Repetitions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WorkoutId");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            WorkoutId = 1,
                            Description = "Barbell bench press",
                            ExerciseName = "Bench Press",
                            ImageUrl = "/images/workouts/bench_press.gif",
                            MuscleGroup = "Chest",
                            Repetitions = "5 reps x 5 sets"
                        },
                        new
                        {
                            WorkoutId = 2,
                            Description = "Incline bench dumbbell press",
                            ExerciseName = "Incline Dumbbell Press",
                            ImageUrl = "/images/workouts/incline_dumbbell_press.gif",
                            MuscleGroup = "Chest",
                            Repetitions = "3-4 sets x 6-8 reps"
                        },
                        new
                        {
                            WorkoutId = 3,
                            Description = "Cable chest flys",
                            ExerciseName = "Cable Flys",
                            ImageUrl = "/images/workouts/cable_flys.gif",
                            MuscleGroup = "Chest",
                            Repetitions = "3 sets x 8-10 reps"
                        },
                        new
                        {
                            WorkoutId = 4,
                            Description = "Standard push-ups",
                            ExerciseName = "Push-ups",
                            ImageUrl = "/images/workouts/push_ups.gif",
                            MuscleGroup = "Chest",
                            Repetitions = "Till failure"
                        },
                        new
                        {
                            WorkoutId = 5,
                            Description = "Tricep cable extensions",
                            ExerciseName = "Cable with Rope Tricep Extensions",
                            ImageUrl = "/images/workouts/tricep_extensions.gif",
                            MuscleGroup = "Triceps",
                            Repetitions = "4 sets x 10 reps"
                        },
                        new
                        {
                            WorkoutId = 6,
                            Description = "Overhead tricep extensions",
                            ExerciseName = "Dumbbell Overhead Tricep Extension",
                            ImageUrl = "/images/workouts/overhead_tricep_extension.gif",
                            MuscleGroup = "Triceps",
                            Repetitions = "3 sets x 10 reps"
                        },
                        new
                        {
                            WorkoutId = 7,
                            Description = "Tricep dips",
                            ExerciseName = "Dips",
                            ImageUrl = "/images/workouts/dips.gif",
                            MuscleGroup = "Triceps",
                            Repetitions = "3 sets till failure"
                        },
                        new
                        {
                            WorkoutId = 8,
                            Description = "Standard dumbbell bicep curls",
                            ExerciseName = "Bicep Curls with Dumbbell",
                            ImageUrl = "/images/workouts/bicep_curls.gif",
                            MuscleGroup = "Biceps",
                            Repetitions = "3 sets x 8-10 reps"
                        },
                        new
                        {
                            WorkoutId = 9,
                            Description = "Hammer-style dumbbell curls",
                            ExerciseName = "Hammer Curls with Dumbbell",
                            ImageUrl = "/images/workouts/hammer_curls.gif",
                            MuscleGroup = "Biceps",
                            Repetitions = "3 sets x 10 reps"
                        },
                        new
                        {
                            WorkoutId = 10,
                            Description = "Wide-grip lat pull-downs",
                            ExerciseName = "Lat Pull Downs",
                            ImageUrl = "/images/workouts/lat_pull_downs.gif",
                            MuscleGroup = "Back",
                            Repetitions = "4 sets x 8-10 reps"
                        },
                        new
                        {
                            WorkoutId = 11,
                            Description = "Cable rows for back",
                            ExerciseName = "Seated Cable Rows",
                            ImageUrl = "/images/workouts/seated_cable_rows.gif",
                            MuscleGroup = "Back",
                            Repetitions = "3-4 sets x 8-10 reps"
                        },
                        new
                        {
                            WorkoutId = 12,
                            Description = "Barbell squats",
                            ExerciseName = "Squats",
                            ImageUrl = "/images/workouts/squats.gif",
                            MuscleGroup = "Legs",
                            Repetitions = "3-4 sets x 6-10 reps"
                        },
                        new
                        {
                            WorkoutId = 13,
                            Description = "Leg extension machine",
                            ExerciseName = "Leg Extensions",
                            ImageUrl = "/images/workouts/leg_extensions.gif",
                            MuscleGroup = "Legs",
                            Repetitions = "3-4 sets x 10 reps"
                        },
                        new
                        {
                            WorkoutId = 14,
                            Description = "Standard sit-ups",
                            ExerciseName = "Sit-ups",
                            ImageUrl = "/images/workouts/sit_ups.gif",
                            MuscleGroup = "Abs",
                            Repetitions = "2 sets x 20-30 reps"
                        },
                        new
                        {
                            WorkoutId = 15,
                            Description = "Hold plank position",
                            ExerciseName = "Planks",
                            ImageUrl = "/images/workouts/planks.gif",
                            MuscleGroup = "Abs",
                            Repetitions = "2 sets x 1 minute"
                        });
                });

            modelBuilder.Entity("FlexiFit.Entities.Models.Booking", b =>
                {
                    b.HasOne("FlexiFit.Entities.Models.Class", "Class")
                        .WithMany("Bookings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiFit.Entities.Models.Member", "Member")
                        .WithMany("Bookings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("FlexiFit.Entities.Models.Class", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FlexiFit.Entities.Models.Member", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
